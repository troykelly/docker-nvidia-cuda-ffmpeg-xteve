---
name: Deploy

# yamllint disable-line rule:truthy
on:
  release:
    types:
      - published
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

jobs:
  information:
    if: |
      github.event_name == 'release'
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ‚ÑπÔ∏è Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      containersha: ${{ steps.information.outputs.containersha }}
      description: ${{ steps.information.outputs.description }}
      environment: ${{ steps.information.outputs.environment }}
      name: ${{ steps.information.outputs.name }}
      version: ${{ steps.information.outputs.version }}
      build_date: ${{ steps.information.outputs.build_date }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v3
      - name: ‚ÑπÔ∏è Gather version and environment
        id: information
        # yamllint disable rule:line-length
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          echo "::set-output name=containersha::${version}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi

          echo "::set-output name=environment::${environment}"
          echo "::set-output name=version::${version}"

          echo "::set-output name=name::xteve with cuda ffmpeg ${environment}"
          echo "::set-output name=description::xteve with cuda ffmpeg ${environment} in a container"
          echo "::set-output name=api_url::${api_url}"
        # yamllint enable rule:line-length
  deploy:
    strategy:
      matrix:
        version: [12.2.0, 12.0.1, 12.0.0, 11.8.0]
        os: [ubuntu22.04]
    name: üë∑ Build & Deploy CUDA ${{ matrix.version }} on ${{ matrix.os }}
    needs:
      - information
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v3

      - name: üìù Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
            prefix=
            suffix=
          # list of Docker images to use as base name for tags
          images: |
            troykelly/xteve-nvidia-cuda-ffmpeg
            ghcr.io/troykelly/xteve-nvidia-cuda-ffmpeg
          # generate Docker tags based on the following events/attributes
          # yamllint disable rule:line-length
          tags: |
            type=schedule,prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=ref,event=branch,prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=ref,event=pr,prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=semver,pattern={{version}},prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=semver,pattern={{major}}.{{minor}},prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=semver,pattern={{major}},prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=sha,prefix=${{ matrix.version }}-${{ matrix.os }}-
            type=raw,value=${{ matrix.version }}-${{ matrix.os }}-latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }},prefix=,suffix=
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') && matrix.version == '12.2.0' && matrix.os == 'ubuntu22.04' }},prefix=,suffix=
          # yamllint enable rule:line-length

      - name: üèó Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: üèó Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: üèó  Login to Docker Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üèó  Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CI_PAT }}

      - name: üöÄ Build
        uses: docker/build-push-action@v4
        with:
          push: true
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./xteve/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # yamllint disable-line rule:line-length
          # platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64/v8
          platforms: linux/amd64
          build-args: |
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_DESCRIPTION=${{ needs.information.outputs.description }}
            BUILD_NAME=${{ needs.information.outputs.name }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
            CUDA=${{ matrix.version }}
            OS=${{ matrix.os }}
